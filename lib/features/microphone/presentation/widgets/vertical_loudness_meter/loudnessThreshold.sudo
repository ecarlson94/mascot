Act as an expert Flutter Developer and an expert in Material UI language.
You will be provided relevant context.
You can ask for more context if necessary.
Update the code I provide based on a few requirements.
You can suggest new code if you need to.
Your modifications should be concise, but you should explain each step.
Place comments on their own lines.
You may ask to see more revelant code if necessary.

First prompt:

I have the following widgets:
```
import 'package:flutter/material.dart';

import '../../../../../core/utils/constants.dart';
import '../microphone_volume_provider.dart';
import 'parts/meter.dart';
import 'parts/slider_button.dart';
import 'parts/vertical_threshold_slider.dart';

class VerticalLoudnessMeter extends StatefulWidget {
  static const double widthRatio = 1 / 5;
  static const Radius radius = bigRadius;
  static const defaultButtonLeftPadding = 5.0;

  final double minDecibels;
  final double maxDecibels;
  final double height;
  final double defaultSliderPositon;
  final void Function(double threshold)? onThresholdChanged;

  const VerticalLoudnessMeter({
    Key? key,
    this.minDecibels = -35,
    this.maxDecibels = 15,
    this.height = 200,
    this.defaultSliderPositon = -10,
    this.onThresholdChanged,
  }) : super(key: key);

  @override
  State<VerticalLoudnessMeter> createState() => _VerticalLoudnessMeterState();
}

class _VerticalLoudnessMeterState extends State<VerticalLoudnessMeter> {
  final ValueNotifier<double?> _sliderPositionNotifier =
      ValueNotifier<double?>(null);

  @override
  void initState() {
    super.initState();
    var sliderPosition = (1 -
            (widget.defaultSliderPositon - widget.minDecibels) /
                (widget.maxDecibels - widget.minDecibels))
        .clamp(0.0, 1.0);

    _sliderPositionNotifier.value = sliderPosition;
  }

  @override
  Widget build(BuildContext context) {
    var buttonPadding = 5.0;
    var maxButtonWidth = 28.0;

    return MicrophoneVolumeProvider(
      builder: (context, volume) {
        return ValueListenableBuilder<double?>(
          valueListenable: _sliderPositionNotifier,
          builder: (context, sliderPosition, _) {
            var width = widget.height * VerticalLoudnessMeter.widthRatio;
            var height = widget.height;
            final double normalizedValue = (volume.value - widget.minDecibels) /
                (widget.maxDecibels -
                    widget.minDecibels); // A number between 0.0 - 1.0
            sliderPosition = sliderPosition ?? 0.5;
            var sliderTop = (height * sliderPosition);

            return SizedBox(
              width: width + buttonPadding + maxButtonWidth,
              height: height,
              child: Stack(
                alignment: AlignmentDirectional.centerStart,
                children: [
                  Meter(
                    width: width,
                    height: height,
                    normalizedValue: normalizedValue,
                    child: Positioned(
                      top: sliderTop,
                      left: 0,
                      child: VerticalThresholdSlider(
                        width: width,
                        thresholdMet: volume.value >
                            _convertSliderPositionToDecibels(sliderPosition),
                        onVerticalDragUpdate: _onDragUpdate,
                        onVerticalDragEnd: _onDragEnd,
                      ),
                    ),
                  ),
                  Positioned(
                    left:
                        width + VerticalLoudnessMeter.defaultButtonLeftPadding,
                    top: (sliderPosition * height) - (maxButtonWidth / 2),
                    child: SliderButton(
                      width: width,
                      height: height,
                      onVerticalDragUpdate: _onDragUpdate,
                      onVerticalDragEnd: _onDragEnd,
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  void _onDragUpdate(DragUpdateDetails details) {
    final newValue =
        _sliderPositionNotifier.value! + details.delta.dy / widget.height;
    final newSliderPosition = newValue.clamp(0.0, 1.0);

    // Prevent the slider from going off the top or bottom of the meter
    // by calculating the max and min slider positions based on the button size
    final maxSliderPosition =
        (widget.height - (SliderButton.maxButtonWidth / 2)) / widget.height;
    final minSliderPosition = (SliderButton.maxButtonWidth / 2) / widget.height;

    final clampedSliderPosition =
        newSliderPosition.clamp(minSliderPosition, maxSliderPosition);
    _sliderPositionNotifier.value = clampedSliderPosition;
  }

  void _onDragEnd(DragEndDetails details) {
    widget.onThresholdChanged?.call(
        _convertSliderPositionToDecibels(_sliderPositionNotifier.value!));
  }

  double _convertSliderPositionToDecibels(double sliderPosition) {
    return widget.minDecibels +
        (1 - sliderPosition) * (widget.maxDecibels - widget.minDecibels);
  }
}
```

```
import 'package:flutter/material.dart';

import '../../../../../../core/extensions/extensions.dart';
import '../../../../../../core/utils/constants.dart';

class Meter extends StatelessWidget {
  final double width;
  final double height;
  final double normalizedValue;
  final Widget? child;

  const Meter({
    super.key,
    required this.width,
    required this.height,
    required this.normalizedValue,
    this.child,
  });

  @override
  Widget build(BuildContext context) {
    return PhysicalModel(
      clipBehavior: Clip.antiAlias,
      color: Colors.transparent,
      borderRadius: bigBorderRadius,
      child: Stack(
        alignment: AlignmentDirectional.centerStart,
        children: [
          _MeterBackground(width: width, height: height),
          _MeterForeground(
            height: height,
            normalizedValue: normalizedValue,
            width: width,
          ),
          if (child != null) child!,
        ],
      ),
    );
  }
}

class _MeterBackground extends StatelessWidget {
  const _MeterBackground({
    required this.width,
    required this.height,
  });

  final double width;
  final double height;

  @override
  Widget build(BuildContext context) {
    return PhysicalModel(
      color: context.colorScheme.tertiaryContainer,
      borderRadius: bigBorderRadius,
      clipBehavior: Clip.antiAlias,
      elevation: 2,
      child: SizedBox(
        width: width,
        height: height,
      ),
    );
  }
}

class _MeterForeground extends StatelessWidget {
  const _MeterForeground({
    required this.height,
    required this.normalizedValue,
    required this.width,
  });

  final double height;
  final double normalizedValue;
  final double width;

  @override
  Widget build(BuildContext context) {
    return Positioned(
      top: (height * (1 - normalizedValue.clamp(0.0, 1.0))),
      left: 0,
      child: PhysicalModel(
        color: context.colorScheme.tertiary,
        borderRadius: bigBorderRadius,
        clipBehavior: Clip.antiAlias,
        elevation: 2,
        child: SizedBox(
          width: width,
          height: height * normalizedValue.clamp(0.0, 1.0),
        ),
      ),
    );
  }
}
```

```
import 'package:flutter/material.dart';

import '../../../../../../core/extensions/extensions.dart';

class VerticalThresholdSlider extends StatelessWidget {
  final double width;
  final bool thresholdMet;
  final void Function(DragUpdateDetails details)? onVerticalDragUpdate;
  final void Function(DragEndDetails details)? onVerticalDragEnd;

  const VerticalThresholdSlider({
    super.key,
    required this.width,
    required this.thresholdMet,
    this.onVerticalDragUpdate,
    this.onVerticalDragEnd,
  });

  @override
  Widget build(BuildContext context) {
    var colorScheme = context.colorScheme;
    return GestureDetector(
      onVerticalDragUpdate: onVerticalDragUpdate,
      onVerticalDragEnd: onVerticalDragEnd,
      child: PhysicalModel(
        color: thresholdMet
            ? colorScheme.onTertiary
            : colorScheme.onTertiaryContainer,
        borderRadius: BorderRadius.circular(2),
        clipBehavior: Clip.antiAlias,
        child: SizedBox(
          width: width,
          height: 4, // Slider height
        ),
      ),
    );
  }
}
```

```
import 'package:flutter/material.dart';

import '../../../../../../core/extensions/extensions.dart';

class SliderButton extends StatelessWidget {
  static const maxButtonWidth = 28.0;

  final double width;
  final double height;
  final void Function(DragUpdateDetails details)? onVerticalDragUpdate;
  final void Function(DragEndDetails details)? onVerticalDragEnd;

  const SliderButton({
    super.key,
    required this.width,
    required this.height,
    this.onVerticalDragUpdate,
    this.onVerticalDragEnd,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onVerticalDragUpdate: onVerticalDragUpdate,
      onVerticalDragEnd: onVerticalDragEnd,
      child: PhysicalModel(
        elevation: 3, // Resting level 3
        color: context.colorScheme.tertiaryContainer,
        borderRadius:
            BorderRadius.circular(maxButtonWidth / 2), // Button border radius
        child: Container(
          width: maxButtonWidth,
          height: maxButtonWidth,
          decoration: const BoxDecoration(
            shape: BoxShape.circle,
          ),
          child: Icon(
            Icons.record_voice_over,
            size: 18,
            color: context.colorScheme.onTertiaryContainer,
          ),
        ),
      ),
    );
  }
}
```

# Context

Currently, the `onVerticalDragEnd` and `onVerticalDragUpdate` callbacks are working correctly for the `SliderButton`.
However, the `onVerticalDragEnd` and `onVerticalDragUpdate` callbacks aren't working at all for the the `VerticalThresholdSlider`.
I have tried rendering the `VerticalThresholdSlider` in between the `Meter` and `SliderButton`, but that did not work either.

# Requirements

Fix the bug.
