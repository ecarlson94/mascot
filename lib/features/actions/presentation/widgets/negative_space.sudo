I have the following widgets:

```
import 'package:flutter/material.dart';

class NegativeSpaceToggle extends StatefulWidget {
  final Widget? child;

  const NegativeSpaceToggle({super.key, this.child});

  @override
  State<NegativeSpaceToggle> createState() => _NegativeSpaceToggleState();
}

class _NegativeSpaceToggleState extends State<NegativeSpaceToggle> {
  bool _showChild = true;

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => setState(() => _showChild = !_showChild),
      child: _showChild
          ? widget.child!
          : const Scaffold(
              backgroundColor: Colors.transparent,
              body: SizedBox.expand(),
            ),
    );
  }
}
```

```
import 'package:flutter/material.dart';

import '../../../../core/extensions/extensions.dart';
import '../../../mascot/presentation/widgets/create_mascot_fab.dart';
import '../../../microphone/presentation/widgets/vertical_loudness_meter/vertical_loudness_meter.dart';
import '../../../settings/presentation/bloc/settings_bloc.dart';
import '../../../settings/presentation/widgets/favorite_mascot_id_provider.dart';
import '../../../settings/presentation/widgets/talking_threshold_provider.dart';
import '../widgets/negative_space_toggle.dart';

class ActionsOverlay extends StatelessWidget {
  const ActionsOverlay({
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return NegativeSpaceToggle(
      child: Scaffold(
        backgroundColor: Colors.transparent,
        body: Stack(
          children: <Widget>[
            Positioned(
              left: 20,
              bottom: 20,
              child: FavoriteMascotIdProvider(
                builder: (_, __) => TalkingThresholdProvider(
                  builder: (_, decibels) => VerticalLoudnessMeter(
                    sliderThreshold: decibels,
                    onThresholdChanged: (threshold) => context
                        .bloc<SettingsBloc>()
                        .add(SetTalkingThreshold(threshold)),
                  ),
                ),
              ),
            ),
          ],
        ),
        floatingActionButton: const CreateMascotFab(),
      ),
    );
  }
}
```

```
import 'package:flutter/material.dart';

import '../../../../../core/utils/constants.dart';
import '../../../domain/models/decibel_lufs.dart';
import '../microphone_volume_provider.dart';
import 'parts/meter.dart';
import 'parts/slider_button.dart';
import 'parts/vertical_threshold_slider.dart';

class VerticalLoudnessMeter extends StatefulWidget {
  static const double widthRatio = 1 / 5;
  static const Radius radius = bigRadius;
  static const defaultButtonLeftPadding = 5.0;
  static const defaultTalkThreshold = DecibelLufs(-10);

  final double minDecibels;
  final double maxDecibels;
  final double height;
  final DecibelLufs? sliderThreshold;
  final void Function(DecibelLufs threshold)? onThresholdChanged;

  const VerticalLoudnessMeter({
    Key? key,
    this.minDecibels = -35,
    this.maxDecibels = 15,
    this.height = 200,
    this.sliderThreshold,
    this.onThresholdChanged,
  }) : super(key: key);

  @override
  State<VerticalLoudnessMeter> createState() => _VerticalLoudnessMeterState();
}

class _VerticalLoudnessMeterState extends State<VerticalLoudnessMeter> {
  final ValueNotifier<double?> _sliderPositionNotifier =
      ValueNotifier<double?>(null);

  @override
  Widget build(BuildContext context) {
    var buttonPadding = 5.0;
    var maxButtonWidth = 28.0;
    _setSliderPosition();

    return MicrophoneVolumeProvider(
      builder: (context, volume) {
        return ValueListenableBuilder<double?>(
          valueListenable: _sliderPositionNotifier,
          builder: (context, sliderPosition, _) {
            var width = widget.height * VerticalLoudnessMeter.widthRatio;
            var height = widget.height;
            final double normalizedValue = (volume.value - widget.minDecibels) /
                (widget.maxDecibels -
                    widget.minDecibels); // A number between 0.0 - 1.0
            sliderPosition = sliderPosition ?? 0.5;
            var sliderTop = (height * sliderPosition);

            return SizedBox(
              width: width + buttonPadding + maxButtonWidth,
              height: height,
              child: Stack(
                alignment: AlignmentDirectional.centerStart,
                children: [
                  Meter(
                    width: width,
                    height: height,
                    normalizedValue: normalizedValue,
                    child: Positioned(
                      top: sliderTop,
                      left: 0,
                      child: VerticalThresholdSlider(
                        width: width,
                        thresholdMet: volume.value >
                            _convertSliderPositionToDecibels(sliderPosition)
                                .value,
                        onVerticalDragUpdate: _onDragUpdate,
                        onVerticalDragEnd: _onDragEnd,
                      ),
                    ),
                  ),
                  Positioned(
                    left:
                        width + VerticalLoudnessMeter.defaultButtonLeftPadding,
                    top: (sliderPosition * height) - (maxButtonWidth / 2),
                    child: SliderButton(
                      width: width,
                      height: height,
                      onVerticalDragUpdate: _onDragUpdate,
                      onVerticalDragEnd: _onDragEnd,
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  void _setSliderPosition() {
    var talkingThreshold =
        widget.sliderThreshold ?? VerticalLoudnessMeter.defaultTalkThreshold;
    var sliderPosition = (1 -
            (talkingThreshold.value - widget.minDecibels) /
                (widget.maxDecibels - widget.minDecibels))
        .clamp(0.0, 1.0);

    if (_sliderPositionNotifier.value == sliderPosition) return;
    _sliderPositionNotifier.value = sliderPosition;
  }

  void _onDragUpdate(DragUpdateDetails details) {
    final newValue =
        _sliderPositionNotifier.value! + details.delta.dy / widget.height;
    final newSliderPosition = newValue.clamp(0.0, 1.0);

    // Prevent the slider from going off the top or bottom of the meter
    // by calculating the max and min slider positions based on the button size
    final maxSliderPosition =
        (widget.height - (SliderButton.maxButtonWidth / 2)) / widget.height;
    final minSliderPosition = (SliderButton.maxButtonWidth / 2) / widget.height;

    final clampedSliderPosition =
        newSliderPosition.clamp(minSliderPosition, maxSliderPosition);
    _sliderPositionNotifier.value = clampedSliderPosition;
  }

  void _onDragEnd(DragEndDetails details) {
    widget.onThresholdChanged?.call(
        _convertSliderPositionToDecibels(_sliderPositionNotifier.value!));
  }

  DecibelLufs _convertSliderPositionToDecibels(double sliderPosition) {
    return DecibelLufs(
      widget.minDecibels +
          (1 - sliderPosition) * (widget.maxDecibels - widget.minDecibels),
    );
  }
}
```

```
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../../core/extensions/extensions.dart';
import '../../domain/models/decibel_lufs.dart';
import '../bloc/microphone_volume_bloc.dart';

class MicrophoneVolumeProvider extends StatelessWidget {
  final Widget Function(BuildContext, DecibelLufs volume) builder;

  const MicrophoneVolumeProvider({super.key, required this.builder});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<MicrophoneVolumeBloc, MicrophoneVolumeState>(
      builder: (context, state) {
        if (state is MicrophoneVolumeInitial) {
          context
              .bloc<MicrophoneVolumeBloc>()
              .add(InitializeMicrophoneVolume());
        }

        return state.volumeStreamOption.fold(
          () => const SizedBox.shrink(),
          (volumeStream) => StreamBuilder<DecibelLufs>(
            stream: volumeStream,
            builder: (context, snapshot) {
              if (!snapshot.hasData) {
                return const SizedBox.shrink();
              }

              return builder(context, snapshot.data!);
            },
          ),
        );
      },
    );
  }
}
```

Whenever I toggle the `ActionsOverlay`, I get the following error:
```
══╡ EXCEPTION CAUGHT BY WIDGETS LIBRARY ╞═══════════════════════════════════════════════════════════
The following StateError was thrown building BlocListener<MicrophoneVolumeBloc,
MicrophoneVolumeState>(state: _BlocListenerBaseState<MicrophoneVolumeBloc,
MicrophoneVolumeState>#2bd92):
Bad state: Stream has already been listened to.
The relevant error-causing widget was:
  BlocBuilder<MicrophoneVolumeBloc, MicrophoneVolumeState>
BlocBuilder:file:///workspaces/mascot/lib/features/microphone/presentation/widgets/microphone_volume_provider.dart:15:12
microphone_volume_provider.dart:15
When the exception was thrown, this was the stack:
dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/errors.dart 266:49      throw_
dart-sdk/lib/async/stream_controller.dart 676:7                                   [_subscribe]
dart-sdk/lib/async/stream_controller.dart 827:19                                  [_createSubscription]
dart-sdk/lib/async/stream_impl.dart 471:9                                         listen
packages/flutter/src/widgets/async.dart 134:30                                    [_subscribe]
packages/flutter/src/widgets/async.dart 108:5                                     initState
packages/flutter/src/widgets/framework.dart 5101:55                               [_firstBuild]
packages/flutter/src/widgets/framework.dart 4944:5                                mount
packages/flutter/src/widgets/framework.dart 3953:15                               inflateWidget
packages/flutter/src/widgets/framework.dart 3682:18                               updateChild
packages/flutter/src/widgets/framework.dart 4993:16                               performRebuild
packages/flutter/src/widgets/framework.dart 5133:11                               performRebuild
packages/flutter/src/widgets/framework.dart 4690:5                                rebuild
packages/flutter/src/widgets/framework.dart 4950:5                                [_firstBuild]
packages/flutter/src/widgets/framework.dart 5124:11                               [_firstBuild]
packages/flutter/src/widgets/framework.dart 4944:5                                mount
packages/nested/nested.dart 222:11                                                mount
packages/flutter/src/widgets/framework.dart 3953:15                               inflateWidget
packages/flutter/src/widgets/framework.dart 3682:18                               updateChild
packages/flutter/src/widgets/framework.dart 4993:16                               performRebuild
packages/flutter/src/widgets/framework.dart 5133:11                               performRebuild
packages/flutter/src/widgets/framework.dart 4690:5                                rebuild
packages/flutter/src/widgets/framework.dart 4950:5                                [_firstBuild]
packages/flutter/src/widgets/framework.dart 5124:11                               [_firstBuild]
packages/flutter/src/widgets/framework.dart 4944:5                                mount
packages/flutter/src/widgets/framework.dart 3953:15                               inflateWidget
packages/flutter/src/widgets/framework.dart 3682:18                               updateChild
packages/flutter/src/widgets/framework.dart 4993:16                               performRebuild
packages/flutter/src/widgets/framework.dart 4690:5                                rebuild
packages/flutter/src/widgets/framework.dart 4950:5                                [_firstBuild]
packages/flutter/src/widgets/framework.dart 4944:5                                mount
packages/flutter/src/widgets/framework.dart 3953:15                               inflateWidget
packages/flutter/src/widgets/framework.dart 3682:18                               updateChild
packages/flutter/src/widgets/framework.dart 4993:16                               performRebuild
packages/flutter/src/widgets/framework.dart 5133:11                               performRebuild
packages/flutter/src/widgets/framework.dart 4690:5                                rebuild
packages/flutter/src/widgets/framework.dart 4950:5                                [_firstBuild]
packages/flutter/src/widgets/framework.dart 5124:11                               [_firstBuild]
packages/flutter/src/widgets/framework.dart 4944:5                                mount
packages/flutter/src/widgets/framework.dart 3953:15                               inflateWidget
packages/flutter/src/widgets/framework.dart 3676:20                               updateChild
packages/flutter/src/widgets/framework.dart 4993:16                               performRebuild
packages/flutter/src/widgets/framework.dart 5133:11                               performRebuild
packages/flutter/src/widgets/framework.dart 4690:5                                rebuild
packages/flutter/src/widgets/framework.dart 2743:18                               buildScope
packages/flutter/src/widgets/binding.dart 863:9                                   drawFrame

```

Modify the code to fix the bug.


-------------------------------------------------------------------------------------------------
Here is the code that creates the stream

```
import 'dart:async';
import 'dart:typed_data';

import 'package:injectable/injectable.dart';
import 'package:universal_html/html.dart' as html;

import '../../../../core/device/web/js_interop/web_audio/web_audio.dart';
import '../../../../core/extensions/extensions.dart';
import '../../../../core/utils/logger.dart';
import '../../domain/models/decibel_lufs.dart';
import '../microphone.dart';

@Injectable(as: Logger<WebMicrophone>)
class MascotMicrophoneLogger extends Logger<WebMicrophone> {}

@LazySingleton(as: Microphone)
class WebMicrophone implements Microphone {
  final AudioContext _webAudio;
  final Logger<WebMicrophone> _logger;

  WebMicrophone(this._webAudio, this._logger);

  @override
  Future<bool> hasPermission() async {
    await _setMicrophoneStream();
    return _microphoneStream != null;
  }

  @override
  Stream<DecibelLufs> get volumeStream async* {
    final analyzer = await _getAnalyzer();
    final data = Float32List(analyzer.frequencyBinCount);

    while (true) {
      // get the audio data from the analyzer
      analyzer.getFloatTimeDomainData(data);

      yield DecibelLufs(data.loudness);

      await Future.delayed(const Duration(milliseconds: 10));
    }
  }

  html.MediaStream? _microphoneStream;
  Future<void> _setMicrophoneStream({bool throwOnError = false}) async {
    try {
      _microphoneStream ??=
          await html.window.navigator.mediaDevices?.getUserMedia({
        'audio': true,
      });
    } catch (e) {
      var message = 'Error getting microphone stream:';
      if (e is html.DomException && e.name == 'NotAllowedError') {
        message = 'Microphone permission denied:';
      }

      _logger.logError(
        message,
        e,
      );

      if (throwOnError) rethrow;
    }

    if (throwOnError && _microphoneStream == null) {
      var e = Exception('Failed to get microphone stream');
      _logger.logError(e.toString(), e);
      throw e;
    }
  }

  AnalyserNode? _analyzer;
  Future<AnalyserNode> _getAnalyzer() async {
    if (_analyzer == null) {
      final source = await _getSource();
      _analyzer = _webAudio.createAnalyser();
      source.connect(_analyzer!);
    }

    return _analyzer!;
  }

  MediaStreamAudioSourceNode? _source;
  Future<MediaStreamAudioSourceNode> _getSource() async {
    await _setMicrophoneStream(throwOnError: true);

    return _source ??= _webAudio.createMediaStreamSource(_microphoneStream!);
  }
}
```

`volumeStream` is the relavant method.

Modify this code to support a `_streamController` instead.
