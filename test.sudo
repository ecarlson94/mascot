Awesome! Now, we need to write tests for the `SettingsIndexedDbDataSource`:
```
import 'package:injectable/injectable.dart';

import '../../../../../core/clean_architecture/entity.dart';
import '../../../../../core/data/indexed_db/indexed_db_data_source.dart';
import '../../models/settings_model.dart';

// TODO: Add tests
@lazySingleton
class SettingsIndexedDbDataSource
    extends IndexedDbDataSourceImpl<SettingsModel> {
  SettingsIndexedDbDataSource(super.indexedDbFactory, super.settings);

  @override
  Future<SettingsModel> getObject(Id id) async {
    var optionSettings = await super.getOptionObject(id);
    return optionSettings.fold(
      () async {
        var settings = SettingsModel.empty;
        await putObject(settings);
        return settings;
      },
      (s) => s,
    );
  }

  @override
  SettingsModel fromJson(Map<String, dynamic> json) {
    return SettingsModel(
      id: json['id'] as int,
      favoriteMascotId: json['favoriteMascotId'] as int?,
    );
  }

  @override
  Map<String, dynamic> toJson(SettingsModel object) {
    return {
      'id': object.id,
      'favoriteMascotId': object.favoriteMascotId,
    };
  }
}
```

There should be an outer `group` named `SettingsIndexedDbDataSource`. Inside that group, there should be another group for each public method. Here is an example:
```
import 'package:flutter_test/flutter_test.dart';
import 'package:mascot/core/clean_architecture/entity.dart';
import 'package:mascot/core/data/indexed_db/indexed_db_data_source.dart';
import 'package:idb_shim/idb_client_memory.dart

import '../../../fixtures/test_model.dart';

class TestIndexedDbDataSource extends IndexedDbDataSourceImpl<TestEntity> {
  TestIndexedDbDataSource(super.indexedDbFactory, super.settings);

  @override
  TestEntity fromJson(Map<String, dynamic> json) {
    return TestEntity(id: json['id'] as Id, name: json['name'] as String);
  }

  @override
  Map<String, dynamic> toJson(TestEntity object) {
    return {'id': object.id, 'name': object.name};
  }
}

class TestIdbFactory extends IndexedDbFactory {
  @override
  IdbFactory? get factory => idbFactoryMemory;
}

main() {
  group('SettingsIndexedDbDataSource', () {
    group('toJson', () {
      test('should {do some thing} when {condition}', () async {
        // arrange

        // act

        // assert
      });
    });
  });
}
```

You need to write the setup and tests for `fromJson`, `toJson`, and the overriden `getObject`.
The test names need to be in the following format:
```
'should {do some thing} when {condition}'
```
